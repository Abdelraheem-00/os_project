
package JavaApplication31;
import java.util.List;
import java.util.ArrayList;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author abdelraheem
 */
public class Gui extends javax.swing.JFrame {

    DefaultTableModel model;
    int rowCount = 0;

    public Gui() {
        initComponents();
        Numberofprocess.setText("1");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jPanel2 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cpuTable = new javax.swing.JTable();
        javax.swing.JButton Exit = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        Numberofprocess = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        CPUTime = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        javax.swing.JButton buttdelete = new javax.swing.JButton();
        Addprocess = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        AlgorithmsList = new javax.swing.JComboBox<>();
        RunAlgorithm = new javax.swing.JButton();
        CPUTime2 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        jLabel5.setText("jLabel5");

        jLabel6.setText("jLabel6");

        jScrollPane2.setViewportView(jEditorPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel2.setForeground(new java.awt.Color(51, 51, 51));

        jLabel4.setBackground(new java.awt.Color(255, 153, 153));
        jLabel4.setFont(new java.awt.Font("Script MT Bold", 1, 60)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("CPU Scheduler");

        cpuTable.setBackground(new java.awt.Color(204, 204, 204));
        cpuTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cpuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom_process", "CPU.T", "Wait.T", "Turn.T"
            }
        ));
        jScrollPane1.setViewportView(cpuTable);

        Exit.setBackground(new java.awt.Color(102, 102, 255));
        Exit.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Exit.setForeground(new java.awt.Color(255, 255, 255));
        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit.png"))); // NOI18N
        Exit.setText("  Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("NO.Process");

        Numberofprocess.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Numberofprocess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberofprocessActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("CPU Time");

        CPUTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CPUTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPUTimeActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(102, 102, 255));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/eraser.png"))); // NOI18N
        jButton3.setText("clear");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        buttdelete.setBackground(new java.awt.Color(102, 102, 255));
        buttdelete.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        buttdelete.setForeground(new java.awt.Color(255, 255, 255));
        buttdelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        buttdelete.setText("Delete");
        buttdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttdeleteActionPerformed(evt);
            }
        });

        Addprocess.setBackground(new java.awt.Color(102, 102, 255));
        Addprocess.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Addprocess.setForeground(new java.awt.Color(255, 255, 255));
        Addprocess.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add (1).png"))); // NOI18N
        Addprocess.setText("Add Process");
        Addprocess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddprocessActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("choose Algorithm");

        AlgorithmsList.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        AlgorithmsList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FCFS", "SJF", "Priority", "Round Robin" }));
        AlgorithmsList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlgorithmsListActionPerformed(evt);
            }
        });

        RunAlgorithm.setBackground(new java.awt.Color(102, 102, 255));
        RunAlgorithm.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        RunAlgorithm.setForeground(new java.awt.Color(255, 255, 255));
        RunAlgorithm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/runer-silhouette-running-fast (1).png"))); // NOI18N
        RunAlgorithm.setText("Run Algorithm");
        RunAlgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunAlgorithmActionPerformed(evt);
            }
        });

        CPUTime2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CPUTime2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPUTime2ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Quautam Time");

        jLabel11.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("State of  process");

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 948, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(585, 585, 585))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(174, 174, 174)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(AlgorithmsList, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(180, 180, 180)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(RunAlgorithm)
                                    .addComponent(CPUTime2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(2, 2, 2))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 1152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(122, 122, 122)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Numberofprocess, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(131, 131, 131)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(130, 130, 130)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(Addprocess, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CPUTime, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(114, 114, 114)
                                    .addComponent(buttdelete, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(25, 25, 25))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(CPUTime, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Numberofprocess, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(4, 4, 4)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Addprocess, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttdelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AlgorithmsList, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CPUTime2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RunAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))))
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CPUTime2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPUTime2ActionPerformed

    }//GEN-LAST:event_CPUTime2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void CPUTimeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CPUTimeActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_CPUTimeActionPerformed

    private void NumberofprocessActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_NumberofprocessActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_NumberofprocessActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton3ActionPerformed
        CPUTime.setText("");
        Numberofprocess.setText("");
        CPUTime2.setText("");
    }
    private void ChangeState (String state){
        CPUTime2.setText(state);
    }
    
    

    private void RunAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {
        int rowCount = model.getRowCount();
        
        int Cputime[] = new int[rowCount];
        ChangeState("Running");
        int WaitingTime[] = new int[rowCount];
        int TrunaroundTime[] = new int[rowCount];

        // shahd
        if (AlgorithmsList.getSelectedItem().equals("FCFS"))
        {
            for (int i = 0; i < rowCount; i++) {
                Cputime[i] = Integer.parseInt(model.getValueAt(i, 1).toString());// Cpu time

            }
            WaitingTime[0] = 0;
            for (int i = 1; i < rowCount; i++) {
                WaitingTime[i] = WaitingTime[i - 1] + Cputime[i - 1];

            }
            for (int i = 0; i < rowCount; i++) {
                TrunaroundTime[i] = WaitingTime[i] + Cputime[i];

            }
            SetWaitingAndTrunAroud(WaitingTime, TrunaroundTime);
            ShowMessageAverageWT("FCFS");
        }
//        mariam
        else if (AlgorithmsList.getSelectedItem().equals("SJF")){
            List<Object[]> TableData = new ArrayList<>();
            
            for(int i=0 ; i<rowCount ; i++){
                Object[]row = new Object[4];
                row[0] = model.getValueAt(i, 0);
                row[1] = Integer.parseInt(model.getValueAt(i, 1).toString());
                row[2] = 0;
                row[3] = 0;
                TableData.add (row);       
            }
            //sort Based on cpu time
            TableData.sort((a,b) -> Integer.compare((int) a[1], (int) b[1]) );
            
            //operation
            int CurrentTime = 0;
             for(int i=0;i<rowCount; i++ ){
                 Object[] row = TableData.get(i);
                 int CpuTime =(int)row[1];
                 row[2] = CurrentTime ;
                 row[3] = (int)row[2] + CpuTime ;
                 CurrentTime += CpuTime;
                 
             }
             SeaderTableData(TableData);
               ShowMessageAverageWT("SJF");
        }
//        abdo
        else if (AlgorithmsList.getSelectedItem().equals("Priority")) {
            rowCount = model.getRowCount();
            if(model.getColumnCount() == 4){
                    model.addColumn("Priority Schaduling"); // إضافة عمود "Quantum Time" في الجدول

            }
  
    
        for (int i = 0; i < rowCount; i++) {
            String PriorityInput = JOptionPane.showInputDialog(this, 
                "Input Priority Schaduling for process " + (i + 1) + ":", 
                "Priority Schaduling Input", 
                JOptionPane.QUESTION_MESSAGE);

            if (PriorityInput == null || PriorityInput.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Quantum Time is required for each process!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                int PriorityProcess = Integer.parseInt(PriorityInput);
                if (PriorityProcess <= 0) {
                    throw new NumberFormatException("Quantum Time must be positive.");
                }
                model.setValueAt(PriorityProcess, i, model.getColumnCount() - 1);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid positive integer for Quantum Time.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        List<Object[]> tableData = new ArrayList<>();
        for (int i = 0; i < rowCount; i++) {
            Object[] row = new Object[5];
            row[0] = model.getValueAt(i, 0); 
            row[1] = Integer.parseInt(model.getValueAt(i, 1).toString()); // Burst Time
            row[2] = 0; 
            row[3] = 0; 
            row[4] = Integer.parseInt(model.getValueAt(i, model.getColumnCount() - 1).toString()); // Quantum Time
            tableData.add(row);
        }

        tableData.sort((a, b) -> Integer.compare((int) a[4], (int) b[4]));

        int currentTime = 0;
        for (int i = 0; i < tableData.size(); i++) {
            Object[] row = tableData.get(i);

            int burstTime = (int) row[1];
            row[2] = currentTime; 

            row[3] = (int) row[2] + burstTime; 

            currentTime += burstTime;
        }

        for (int i = 0; i < tableData.size(); i++) {
            Object[] row = tableData.get(i);
            model.setValueAt(row[0], i, 0);
            model.setValueAt(row[1], i, 1);
            model.setValueAt(row[2], i, 2);
            model.setValueAt(row[3], i, 3);
            model.setValueAt(row[4], i, 4);

        }
        double totalWaitingTime = 0, totalTurnAroundTime = 0;
        for (int i = 0; i < rowCount; i++) {
            totalWaitingTime += Integer.parseInt(model.getValueAt(i, 2).toString()) ;
            totalTurnAroundTime += Integer.parseInt( model.getValueAt(i, 3).toString());
        }
        double averageWaitingTime = totalWaitingTime / rowCount;
        double averageTurnAroundTime = totalTurnAroundTime / rowCount;

                JOptionPane.showMessageDialog(this, 
                    "In RR  Average Waiting Time: " + averageWaitingTime + 
                    "\nAverage Turnaround Time: " + averageTurnAroundTime, 
                    "Results", JOptionPane.INFORMATION_MESSAGE);
                        
    
    }
//       laila
        
            else if (AlgorithmsList.getSelectedItem().equals("Round Robin")) {
            String inputQuantam = JOptionPane.showInputDialog(this, "Enter Quantam time for all process", "Quantam Time", JOptionPane.QUESTION_MESSAGE);
            jTextField1.setText(inputQuantam);
            int QuantamTime = Integer.parseInt(inputQuantam);
            List<Object[]> tableData = new ArrayList<>();
            int[] backupCpuTime = new int[rowCount];

            for (int i = 0; i < rowCount; i++) {  // Corrected loop condition
                Object[] row = new Object[4];
                row[0] = model.getValueAt(i, 0);
                row[1] = Integer.parseInt(model.getValueAt(i, 1).toString());
                backupCpuTime[i] = Integer.parseInt(model.getValueAt(i, 1).toString());
                row[2] = 0;
                row[3] = 0;
                tableData.add(row);
            }

            boolean allProcessesComplete;
            int current = 0;
            do {
                allProcessesComplete = true;
                for (Object[] row : tableData) {
                    int cpuTime = (int) row[1];
                    if (cpuTime > 0) {
                        allProcessesComplete = false;
                        if (cpuTime > QuantamTime) {
                            current += QuantamTime;
                            row[1] = (int) row[1] - QuantamTime;
                        } else {
                            current += cpuTime;
                            row[1] = 0;
                            row[3] = current;
                            row[2] = (int) row[3] - cpuTime;
                        }
                    }
                }
            } while (!allProcessesComplete);

            for (int i = 0; i < rowCount; i++) {
                Object[] row = tableData.get(i);
                model.setValueAt(row[0], i, 0);
                model.setValueAt(backupCpuTime[i], i, 1);
                model.setValueAt(row[2], i, 2);
                model.setValueAt(row[3], i, 3);
            }


            ShowMessageAverageWT("Round Robin");
        }

    }
    
    

    private void AddprocessActionPerformed(java.awt.event.ActionEvent evt) {
        model = (DefaultTableModel) cpuTable.getModel();
        if (CPUTime.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "CPU Time UnVailed", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // 1- Add to Table
            Add_To_Table();
            // 2- Clear Cpu Time
            ClearCPUTime();
            // 3- Increment Number of Process
            InsreamentNumderProcess();
            ChangeState("Waiting");

        }
    }

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ExitActionPerformed
        JFrame frame = new JFrame("Exit");
        if (JOptionPane.showConfirmDialog(frame, "Confirm if you want to exit ", "My Contacts ",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
      
    }// GEN-LAST:event_ExitActionPerformed

    private void buttdeleteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttdeleteActionPerformed
        int row = cpuTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Select a row to delete", "Try Again",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) cpuTable.getModel();

            Object nomProcessObj = model.getValueAt(row, 0);
            String nomProcess = nomProcessObj != null ? nomProcessObj.toString() : "Unknown";

            int confirm = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to delete process: " + nomProcess + "?",
                    "Confirm Deletion", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                model.removeRow(row);

                JOptionPane.showMessageDialog(null, "Process deleted successfully!", "Success",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }

    private void AlgorithmsListActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_AlgorithmsListActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_AlgorithmsListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }
    private void SeaderTableData(List<Object[]> TableDate) {
        for (int i = 0; i < TableDate.size(); i++) {
            Object[] row = TableDate.get(i);
            model.setValueAt(row[0], i, 0);
            model.setValueAt(row[1], i, 1);
            model.setValueAt(row[2], i, 2);
            model.setValueAt(row[3], i, 3);
            if (model.getColumnCount() == 5) {
                model.setValueAt(row[4], i, 4);
            }

        }
    }
    
   
    private void Add_To_Table() {
    model.addRow(new Object[] { "process number" + Numberofprocess.getText(), CPUTime.getText(), 0, 0 });
}

    private void ClearCPUTime() {
        CPUTime.setText("");
    }

    private void InsreamentNumderProcess() {
        int Number = Integer.parseInt(Numberofprocess.getText());
        Number++;
        Numberofprocess.setText(Number + "");

    }

    private void SetWaitingAndTrunAroud(int waitingTime[], int trunAround[]) {
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(waitingTime[i], i, 2);
            model.setValueAt(trunAround[i], i, 3);

        }
    }

    private void ShowMessageAverageWT(String Algorithm) {
        double tatalwaiting = 0;
        double tatalTrunaround = 0;
        for (int i = 0; i < model.getRowCount(); i++) {
            tatalwaiting += Integer.parseInt(model.getValueAt(i, 2).toString());
            tatalTrunaround += Integer.parseInt(model.getValueAt(i, 3).toString());
        }
        tatalwaiting /= model.getRowCount();
        tatalTrunaround /= model.getRowCount();
        JOptionPane.showMessageDialog(this,
                "in " + Algorithm + " ]\n Average Waiting Time :" + tatalwaiting + "\n average trunAround Time :"
                        + tatalTrunaround,
                "Result", JOptionPane.INFORMATION_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Addprocess;
    private javax.swing.JComboBox<String> AlgorithmsList;
    private javax.swing.JTextField CPUTime;
    private javax.swing.JTextField CPUTime2;
    private javax.swing.JTextField Numberofprocess;
    private javax.swing.JButton RunAlgorithm;
    private javax.swing.JTable cpuTable;
    private javax.swing.JButton jButton3;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void showMessageAverageWT(String round_Robin) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
